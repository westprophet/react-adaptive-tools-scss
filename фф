

Это некоторые файлы моего npm пакета

```typescript jsx
/**
 * Created by westp on 15.05.2023
 */

import { TBreakpoint } from '../interfaces/TBreakpoint';
import { useBreakpointDF, useBreakpointMF } from '../hooks/useBreakpoint';

interface Props {
  children: any;
}

interface ForComponentProps extends Props {
  p: TBreakpoint | number;
}

export function For({children, p}: ForComponentProps) {
  const is = useBreakpointMF(p);
  if (is) return children;
  return null;
}


export function Before({children ,p}: ForComponentProps) {
  const is = useBreakpointDF(p);
  if (is) return children;
  return null;
}

```


```typescript
// @ts-ignore
import { HORIZONTAL_BREAKPOINTS, VERTICAL_BREAKPOINTS } from '../breakpoints.config';
import { TBreakpoint, TVerticalBreakpoint } from '../interfaces/TBreakpoint';

export default function getBreakpoint(b: TBreakpoint): string {
    return HORIZONTAL_BREAKPOINTS[b];
}

export function getVBreakpoint(b: TVerticalBreakpoint): string {
    return VERTICAL_BREAKPOINTS[b];
}
```


```typescript
import { useMediaQuery } from 'react-responsive';

import { TBreakpoint } from '../interfaces/TBreakpoint';
import { TAdaptiveVariant } from '../interfaces/TAdaptiveVariant';
import useVariant from './useVariant';
import getBreakpoint from "../functions/getBreakpoint";

export default function useBreakpoint(b: TBreakpoint | number, variant: TAdaptiveVariant = 'MtF') {
  const _bp = typeof b === 'number' ? b + 'px' :  getBreakpoint(b);
  const v = useVariant(variant);
  return useMediaQuery({ query: `(${v}-width: ${_bp})` });
}

export function useBreakpointMF(b: TBreakpoint | number) {
  return useBreakpoint(b, 'MtF');
}

export function useBreakpointDF(b: TBreakpoint | number) {
  return useBreakpoint(b, 'MtF');
}
```

```typescript
import {TAdaptiveVariant} from "../interfaces/TAdaptiveVariant";

export default function useVariant(variant: TAdaptiveVariant){
    return variant === 'MtF' ? 'min': 'max';
}
```


```typescript
import { useMediaQuery } from 'react-responsive';

import { TVerticalBreakpoint } from '../interfaces/TBreakpoint';
import { TAdaptiveVariant } from '../interfaces/TAdaptiveVariant';
import useVariant from './useVariant';
import getBreakpoint, {getVBreakpoint} from "../functions/getBreakpoint";

export default function useVBreakpoint(b: TVerticalBreakpoint | number, variant: TAdaptiveVariant = 'MtF') {
  const _bp = typeof b === 'number' ? b + 'px' :  getVBreakpoint(b);
  const v = useVariant(variant);
  return useMediaQuery({ query: `(${v}-height: ${_bp})` });
}

export function useVBreakpointMF(b: TVerticalBreakpoint | number) {
  return useVBreakpoint(b, 'MtF');
}

export function useVBreakpointDF(b: TVerticalBreakpoint | number) {
  return useVBreakpoint(b, 'MtF');
}
```


```typescript
export type TAdaptiveVariant = 'MtF' | 'DtF';
```


```typescript
export type TBreakpoint =
    | 'xs'
    | 'sm'
    | 'md'
    | 'lg'
    | 'lt'
    | 'ltm'
    | 'ltl'
    | 'xl'
    | 'xxl'
    | 'qxl'


export type TVerticalBreakpoint =
    | 'xs'
    | 'sm'
    | 'md'
    | 'lg'
    | 'xl'
    | 'xxl'
```


```typescript
import { TBreakpoint, TVerticalBreakpoint } from './TBreakpoint';

export type TBreakpoints<T> = {
  [key in TBreakpoint]: T;
};

export type TVerticalBreakpoints<T> = {
  [key in TVerticalBreakpoint]: T;
};
```


```ecmascript 6
// breakpoints.config.mjs
const HORIZONTAL_BREAKPOINTS = {
  "xs": "320px",
  "sm": "576px",
  "md": "768px",
  "lg": "992px",
  "lt": "1024px",
  "ltm": "1200px",
  "ltl": "1440px",
  "xl": "1920px",
  "xxl": "2560px",
  "qxl": "3840px"
};

const VERTICAL_BREAKPOINTS = {
  "xs": "600px",
  "sm": "800px",
  "md": "1000px",
  "lg": "1200px",
  "xl": "1600px",
  "xxl": "1601px"
};

export { HORIZONTAL_BREAKPOINTS, VERTICAL_BREAKPOINTS };
```

```typescript
declare module 'breakpoints.config' {
  export const HORIZONTAL_BREAKPOINTS: { [key: string]: string };
  export const VERTICAL_BREAKPOINTS: { [key: string]: string };
}
```


```typescript
import { TBreakpoints, TVerticalBreakpoints } from '../interfaces/TBreakpoints';
import { TBreakpoint, TVerticalBreakpoint } from '../interfaces/TBreakpoint';

export * from './hooks/useBreakpoint';
export * from './hooks/useVBreakpoint';

export type {
  TBreakpoints,
  TBreakpoint,
  TVerticalBreakpoint,
  TVerticalBreakpoints,
};

export * from './components/horizontal';
```


```json
{
  "name": "react-responsive-tools",
  "version": "2.1.5",
  "description": "",
  "main": "index.js",
  "module": "index.js",
  "types": "index.d.ts",
  "type": "module",
  "scripts": {
    "dev": "webpack --mode development --watch",
    "start": "webpack serve --config webpack.config.js --env development=true",
    "tsc": "tsc",
    "test": "jest",
    "lint": "eslint \"{**/*,*}.{js,ts,jsx,tsx}\"",
    "lint-fix": "eslint \"{**/*,*}.{js,ts,jsx,tsx}\" --fix",
    "build": "tsc && webpack --mode production",
    "postinstall": "echo 'To recreate all files, run: react-responsive-tools run reinit'",
    "reinit": "sh ./reinit.sh"
  },
  "files": [
    "src",
    "*.ts",
    "*.scss",
    "index.js",
    "reinit.sh",
    "index.d.ts"
  ],
  "keywords": [
    "react",
    "typescript",
    "scss-tools",
    "react-responsive"
  ],
  "author": "westprophet",
  "license": "ISC",
  "peerDependencies": {
    "react-responsive": "^10.0.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "@babel/core": "^7.25.2",
    "@babel/preset-env": "^7.25.4",
    "@babel/preset-typescript": "^7.24.7",
    "@testing-library/jest-dom": "^6.5.0",
    "@testing-library/react": "^16.0.1",
    "@testing-library/react-hooks": "^8.0.1",
    "@types/jest": "^29.5.12",
    "@types/node": "^22.5.4",
    "@types/react-dom": "^18.3.0",
    "@typescript-eslint/eslint-plugin": "^8.5.0",
    "@typescript-eslint/parser": "^8.5.0",
    "babel-loader": "^9.1.3",
    "copy-webpack-plugin": "^12.0.2",
    "css-loader": "^7.1.2",
    "eslint": "^9.10.0",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-config-airbnb-typescript": "^18.0.0",
    "eslint-import-resolver-typescript": "^3.6.3",
    "eslint-plugin-import": "^2.30.0",
    "eslint-plugin-jsx-a11y": "^6.10.0",
    "eslint-plugin-react": "^7.35.2",
    "eslint-webpack-plugin": "^4.2.0",
    "file-loader": "^6.2.0",
    "husky": "^9.1.5",
    "jest": "^29.7.0",
    "react-test-renderer": "^18.3.1",
    "sass": "^1.78.0",
    "sass-loader": "^16.0.1",
    "style-loader": "^4.0.0",
    "ts-jest": "^29.2.5",
    "ts-loader": "^9.5.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.5.4",
    "webpack": "^5.94.0",
    "webpack-cli": "^5.1.4"
  },
  "bin": {
    "react-responsive-tools": "bin/react-responsive-tools.mjs"
  },
  "dependencies": {
    "react-responsive": "^10.0.0"
  }
}
```


```ecmascript 6
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import ESLintPlugin from 'eslint-webpack-plugin';
import CopyPlugin from 'copy-webpack-plugin';
import webpack from 'webpack';

// Получаем __filename и __dirname эквиваленты
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const source = resolve(__dirname, 'src');

export default ({ development }) => ({
  entry: `${source}/index.ts`,
  devtool: development ? 'inline-source-map' : false,
  mode: development ? 'development' : 'production',
  output: {
    path: resolve(__dirname, 'dist'),
    filename: '[name].bundle.js',
    publicPath: '/',
  },
  module: {
    rules: [
      {
        test: /\.(ts|tsx|js|jsx)$/,
        include: source,
        exclude: /node_modules/,
        use: 'ts-loader',
      },
      {
        test: /\.(jpe?g|gif|png|svg|woff|ttf|wav|mp3)$/,
        loader: 'file-loader',
      },
      {
        test: /\.s[ac]ss$/i,
        use: [
          'style-loader',
          'css-loader',
          'sass-loader',
        ],
      },
    ],
  },
  resolve: {
    extensions: ['.ts', '.tsx', '.js', '.jsx'],
  },
  plugins: [
    new webpack.ProvidePlugin({
      React: 'react',
    }),
    new ESLintPlugin({
      extensions: ['js', 'jsx', 'ts', 'tsx'],
    }),
    new CopyPlugin({
      patterns: [
        { from: 'src/**/*.scss', to: 'dist/[name][ext]', context: 'src' },
      ],
    }),
  ],
  devServer: {
    contentBase: resolve(__dirname, 'dist'),
    compress: true,
    port: 9000,
    historyApiFallback: true,
  },
});
```





Я хочу закомпилирвать ts и tsx файлы в js что бы пользователь мог бы у себя получить нужные ему компоненты и хуки

А другую часть scss файлов импортировать для пользователя как есть (без компиляции их в css)

Запомни это












